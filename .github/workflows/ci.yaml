name: Android CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11 (Zulu)
        uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: "11"

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Create local.properties
        run: |
          echo "PRODUCTION_MODE=${{ secrets.PRODUCTION_MODE }}" >> $GITHUB_WORKSPACE/local.properties
          echo "API_URL=${{ secrets.API_URL }}" >> $GITHUB_WORKSPACE/local.properties
          echo "API_URL_PROD=${{ secrets.API_URL_PROD }}" >> $GITHUB_WORKSPACE/local.properties
          echo "ARTICLE_URL=${{ secrets.ARTICLE_URL }}" >> $GITHUB_WORKSPACE/local.properties

      - name: Build with Gradle
        run: ./gradlew assembleRelease

      - name: List output directory
        run: ls -R app/build/outputs/apk/release

      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: app-release-unsigned.apk
          path: app/build/outputs/apk/release/app-release-unsigned.apk

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download APK
        uses: actions/download-artifact@v2
        with:
          name: app-release-unsigned.apk
          path: app-release-unsigned.apk

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [ -z "$latest_tag" ]; then
            echo "v0.0.0" # Default version if no tags are found
          else
            echo $latest_tag
          fi
        shell: bash
        continue-on-error: true

      - name: Generate new version
        id: generate_version
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
          IFS='.' read -r -a version_parts <<< "${latest_tag#v}"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          new_patch=$((patch + 1))
          new_version="v$major.$minor.$new_patch"
          echo "::set-output name=version::$new_version"
        shell: bash
        continue-on-error: true

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate_version.outputs.version }}
          release_name: Release ${{ steps.generate_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app-release-unsigned.apk
          asset_name: app-release-unsigned.apk
          asset_content_type: application/vnd.android.package-archive
